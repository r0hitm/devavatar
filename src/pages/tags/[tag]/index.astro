---
import type { GetStaticPaths } from "astro";
import RootLayout from "@/layouts/RootLayout.astro";
import getPosts from "@/utils/getPosts";
import getUniqueTags from "@/utils/getUniqueTags";
import Card from "@/components/Card.astro";
import { slugifyAll } from "@/utils/slugify";
import type { LANG } from "@/i18n/ui";

export const getStaticPaths = (async () => {
    const posts = await getPosts();

    const tags = getUniqueTags(posts);
    return tags.map(({ tag, tagName }) => {
        return {
            params: { tag },
            props: { tag, tagName, posts }
        };
    });
}) satisfies GetStaticPaths;

const { tag, tagName, posts } = Astro.props;

const postsByTag = posts.filter(post =>
    slugifyAll(post.data.tags).includes(tag)
);
const lang = (Astro.currentLocale || "en") as keyof typeof LANG;
---

<RootLayout
    title={lang === "ja" ? `タグ | ${tagName}` : `Tag: ${tagName}`}
    description={lang === "ja"
        ? `タグ${tagName}を付けられた記事`
        : `All the posts with ${tagName} tag.`}
>
    <!-- TODO: breadcrumbs -->

    <h1 class="mb-2 text-3xl font-bold" transition:name={tag}>
        {lang === "ja" ? `タグ： ${tagName}` : `Tag: ${tagName}`}
    </h1>

    {
        lang === "ja" ? (
            <p class="italic">
                タグ
                <span class="decoration-d-border underline underline-offset-4">
                    {tagName}
                </span>
                を付けられた記事数は{postsByTag.length}です。
            </p>
        ) : (
            <p class="italic">
                There are {postsByTag.length} posts tagged
                <span class="decoration-d-border underline underline-offset-4">
                    {tagName}
                </span>
            </p>
        )
    }

    <ul>
        {
            postsByTag.map(({ data, id }) => (
                <Card href={`/posts/${id}`} postId={id} frontmatter={data} />
            ))
        }
    </ul>
</RootLayout>
